#!/usr/bin/env python2.6
import optparse
import os
import shutil
import sys
import time

import SimpleHTTPServer
import SocketServer

from django.conf import settings
import django.template.loader
import yaml

import document
import filesystem


DEFAULT_SERVER_PORT = 9000


def loadConfig(filename):
  if not os.path.isfile(filename):
    config = {}
  else:
    stream = file(filename, 'r')
    config = yaml.load(stream)
  populateDefaults(config)
  return config


def populateDefaults(config):
  if 'source' not in config:
    config['source'] = '.'
  if 'destination' not in config:
    config['destination'] = '_site'
  if 'server_port' not in config:
    config['server_port'] = DEFAULT_SERVER_PORT

  if 'exclude' not in config:
    config['exclude'] = set()
  else:
    config['exclude'] = set(config['exclude'])


def checkDir(path, mode):
  if not os.path.isdir(path):
    print 'Error: "%s" does not exist.' % path
    return False
  if not os.access(path, mode):
    print 'Error: "%s" does not have the correct permissions.' % path
    return False
  return True


def sitePath():
  siteDir = '_site'
  if os.path.isdir(siteDir):
    return siteDir
  return None


def startServer(address):
  handlerClass = SimpleHTTPServer.SimpleHTTPRequestHandler
  httpd = SocketServer.TCPServer(address, handlerClass)
  path = sitePath()
  if path is None:
    return None  # No serving path
  os.chdir(path)

  print 'HTTP server at http://%s:%d' % address
  httpd.serve_forever()


def parseArgs():
  usage = 'usage: %prog [options]'
  parser = optparse.OptionParser()
  parser.add_option('-p', '--port', dest='port',
                    metavar='PORT',
                    help='port number to use for webserver')
  parser.add_option('-s', '--server', dest='server', action='store_true',
                    default=False,
                    help='enable webserver')

  (options, args) = parser.parse_args()

  # args syntax: [source] [dest] OR [dest]
  if len(args) > 2:
    parser.print_usage()
    sys.exit(1)

  return (options, args)


def targetForDocname(dest, docname):
  '''Maps a document name to its target destination on disk.

  Args:
    dest: site output base path
    docname: document name

  Returns:
    full filesystem path
  '''
  index = os.path.join(docname, 'index.html')
  path = os.path.join(dest, index)
  return path


def writeDocument(doc, dest):
  global config

  docname = doc.name()
  start = time.time()

  # Create file names.
  target_file = targetForDocname(dest, docname)
  temp_file = '%s~' % target_file

  print '%s -> %s   ' % (docname, target_file),

  # Render content.
  values = {'site': config,
            'document': doc,
            'toplevel': docname.split('/')[0],
            'title_shortname': document.header_short_name(doc.title())}
  content = django.template.loader.render_to_string('index.html', values)

  # Ensure directory exists.
  dir_path = os.path.dirname(target_file)
  try:
    os.makedirs(dir_path)
  except os.error:
    pass

  # Write to the temporary file.
  fh = open(temp_file, 'w')
  if not fh:
    errorAndExit('Failed to open %s' % temp_file)
  fh.write(content)
  fh.close()

  # Rename to target file.
  try:
    os.rename(temp_file, target_file)
  except OSError, e:
    errorAndExit('failed to rename: %s' % e)

  print '%.3fs' % (time.time() - start)


def copyStaticFile(file, dest):
  file_dest = os.path.join(dest, file.name())
  dir, base = os.path.split(file_dest)
  try:
    os.makedirs(dir)
  except OSError:
    pass

  print '%s -> %s' % (file.name(), file_dest)
  shutil.copy(file.name(), file_dest)


def build(source, dest, exclude):
  fs = filesystem.Filesystem(source, exclude)
  ds = document.DocumentSet()

  static_files = []

  # Separate static files from documents.
  filenames = fs.list()
  for filename in filenames:
    file = fs.file(filename)

    if ds.isDocument(file):
      ds.documentNew(file)
    else:
      static_files.append(file)

  # Compile documents.
  for name in ds.list():
    doc = ds.document(name)
    writeDocument(doc, dest)

  # Copy static files.
  for file in static_files:
    copyStaticFile(file, dest)


def main():
  global config

  # Parse arguments.
  (options, args) = parseArgs()
  if len(args) == 2:
    source = args[0]
  else:
    source = '.'

  # Load configuration file.
  configPath = os.path.join(source, '_config.yml')
  try:
    config = loadConfig(configPath)
  except yaml.scanner.ScannerError, e:
    print 'Error occurred while parsing config:\n%s' % str(e)
    sys.exit(1)

  # Override config settings with commandline arguments as necessary.
  if len(args) == 1:
    config['destination'] = args[0]
  elif len(args) == 2:
    config['source'] = args[0]
    config['destination'] = args[1]

  if options.port is not None:
    config['server_port'] = options.port

  # Expand and normalize paths.
  source = os.path.normpath(os.path.abspath(config['source']))
  dest = os.path.normpath(os.path.abspath(config['destination']))

  # Ensure source and destination exist and have the proper permissions.
  if (not checkDir(source, os.R_OK | os.X_OK) or
      not checkDir(dest, os.R_OK | os.X_OK)):
    sys.exit(1)

  # Set up layouts.
  layoutsDir = os.path.join(source, '_layouts')
  django.conf.settings.configure(TEMPLATE_DIRS=(layoutsDir,))

  # Create exclude set. Items here are relative to the source directory.
  exclude = config['exclude']
  exclude.add('_config.yml')
  exclude.add('_layouts')
  if not os.path.relpath(dest, source).startswith(os.pardir):
    exclude.add(os.path.relpath(dest, source))

  print 'Source: %s' % source
  print 'Destination: %s' % dest
  print 'Exclude: %s' % str(list(exclude))

  # Build the site.
  build(source, dest, exclude)

  if options.server:
    address = ('localhost', config['server_port'])
    startServer(address)


if __name__ == '__main__':
  main()